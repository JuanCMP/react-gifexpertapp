{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGift.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGift","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KA2BA,OAEI,sBAAMC,SAlBW,SAACC,GAGlBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAGxCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SA9Bc,SAACP,GAIvBF,EAAeE,EAAEQ,OAAOF,a,+BCXnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAKAI,MAAOF,GALP,cAKbG,EALa,gBAQIA,EAAKC,OART,uBAQXC,EARW,EAQXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAGXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBvB,kBAoBZM,GApBY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAKA,QCCJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAItB,ECNwB,SAAEA,GAG1B,MAA4Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAiBA,OAVAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAAEpB,IAEEqB,EDd0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QASrB,OACI,qCACI,6BAAKpB,IACHoB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAgB,GAAI,OACZ,cAAC,EAAD,eAEQA,GADIA,EAAKd,aEvB5BgB,EAAe,WAMxB,MAAqCzC,mBAAU,CAAC,cAAhD,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAYA,OACI,qCACI,8CAGA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADLA,YC7BnC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.9fb7cb29.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n// Receive 'setCategories' function from 'GifExpertApp'\nexport const AddCategory = ({setCategories}) => {\n    \n    const [ inputValue, setInputValue ] = useState('');\n    \n    //Allows us to change input text box <--> Re-writting 'inputValue' status\n    const handleInputChange = (e) => {\n        // Block to change input text box\n        //console.log( e.target.value );\n        \n        setInputValue( e.target.value );\n    }\n    \n    \n    const handleSubmit = (e) => {\n        \n        //Block web browser refreshing\n        e.preventDefault();\n        \n        if ( inputValue.trim().length > 2 ) {\n            // Add each category to existent category array\n            setCategories( cats => [ inputValue, ...cats ] );\n            \n            // Block duplicate posting\n            setInputValue('')\n        \n        }\n    }\n    \n    \n    return(\n        \n        <form onSubmit= {handleSubmit} >\n            <input \n                type='text'\n                value={ inputValue }\n                onChange={handleInputChange}\n            />\n        </form>\n        \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n// Get 'category' and makes http request\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=YYlrlUaZTZQBThEpIqKI53m4SEcaajzE`\n    \n    // Go to API and get the answer\n    const resp = await fetch( url );\n    \n    // Convert answer to json format\n    const { data } = await resp.json();\n\n    // Go to every image\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            \n            // '?' if exist image,get. Else,nothing\n            url: img.images?.downsized_medium.url\n        }\n    } )\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className='card animate__animated animate__flipInX'>\n            <img src = {url} alt = {title}/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n  ","// useEfect: allow us to apply conditions\nimport React from 'react';\nimport { useFetchGift } from '../hooks/useFetchGift';\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n    \n    // const [ images, setImages ] = useState([]);\n    \n    const { data:images, loading } = useFetchGift( category );\n\n\n    // useEffect( () => {\n    //     // This is executed when component is renderized by first time.\n    //     getGifs( category ) \n    //     .then( imgs => setImages( imgs ) ) // The new status of 'images' is the setImages( imgs ) input\n    // }, [ category ] ) // If category change then compile again useEfect.\n    \n    return (\n        <>\n            <h3>{category}</h3>\n            { loading && <p>Loading...</p>}\n            <div className='card-grid'>\n                {\n                    images.map( imgs => (\n                        <GifGridItem\n                            key = { imgs.id }\n                            {...imgs} // Envia cada una de las propiedades de las imgs como una propiedad independiente\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n};\n\n","// Los custom hooks son una forma de extraer logica de algún componente o logica que se quiere extraer de una manera sencilla para ser usada en otra ocasión.\n\nimport { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGift = ( category ) => {\n    \n    // Los hooks pueden tener estado\n    const [ state, setState ] = useState({\n        data: [],\n        loading: true\n    });\n\n    \n    // Los useEffect NO pueden ser async\n    useEffect( () => {\n        getGifs( category )\n        .then( imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })      \n        }) \n    }, [ category ])\n    \n    return state; // { data: [], loading: true }\n}\n","\nimport React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = ()  => {\n    \n    // Can't mutate, can't renderizing and We need to do it...\n    //const categories = ['One Punch', 'Samulari X', 'Dragon Ball'];\n\n    // Renderizing if we add or modify whatever item of 'categories'\n    const [categories, setCategories ] = useState( ['One Punch'] );\n\n    \n    // Add 'The simpsons' to categories and renderizing\n    // const handleAdd = () => {\n    //     setCategories( [ 'The simpsons', ...categories ] );\n        \n    //     Or doing like\n    //     setCategories( cats => [ 'The simpsons', ...cats ] );\n    // }\n    \n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            \n            {/* Communication among two components 'AddCategory' and 'GifExpertApp' */}\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid\n                            key = {category}\n                            category = {category}  \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}