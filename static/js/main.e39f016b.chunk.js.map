{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGift.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGift","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAuBA,OAEI,uBAAMC,SAhBW,SAACC,GAGlBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAGxCN,EAAc,MAMlB,UAGI,4BAAKD,IAGL,uBACIQ,KAAO,OACPC,MAAUT,EAGVU,SAjCc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,c,+BCTnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAKAI,MAAOF,GALP,cAKbG,EALa,gBAQIA,EAAKC,OART,uBAQXC,EARW,EAQXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAGXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBvB,kBAoBZM,GApBY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAKA,QCIJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECTwB,SAAEA,GAE1B,MAA4Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAgBA,OAVAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAAEpB,IAEEqB,EDT0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAIrB,OACI,qCACI,6BAAKpB,IACHoB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAgB,GAAI,OACZ,cAAC,EAAD,eAEQA,GADIA,EAAKd,aElB5BgB,EAAe,SAAC,GAAiC,IAAD,IAA9BC,yBAA8B,MAAV,GAAU,EAEzD,EAAqC1C,mBAAU0C,GAA/C,mBAAOC,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACI,mEAGA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBACA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OAGpB,aADA,CACC,EAAD,CAEIA,SAAaA,GADLA,QAMxB,iEC1BZ8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e39f016b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n// 'setCategories' actualiza el estado de las categorias en 'GifExpertApp'\nexport const AddCategory = ({ setCategories }) => {\n    \n    const [ inputValue, setInputValue ] = useState('');\n    \n    // Re-write 'inputValue' status\n    const handleInputChange = (e) => {  \n        // Unblock to change default input textbox\n        setInputValue( e.target.value );\n    }\n    \n    \n    const handleSubmit = (e) => {\n        \n        //Block web browser refreshing\n        e.preventDefault();\n        \n        if ( inputValue.trim().length > 2 ) {\n            // Add category to existent category array\n            setCategories( cats => [ inputValue, ...cats ] );\n            \n            // Block duplicate posting\n            setInputValue('');\n        }\n    }\n        \n    return(\n        \n        <form onSubmit = { handleSubmit }>\n            \n            {/* ingreso por teclado del usuario */}\n            <p>{ inputValue }</p> \n            \n            {/* caja de texto */}\n            <input \n                type = 'text'\n                value = { inputValue } \n                \n                // se activa al oprimir el enter\n                onChange = { handleInputChange }\n            />\n        </form>\n        \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n// Get 'category' and makes http request\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=YYlrlUaZTZQBThEpIqKI53m4SEcaajzE`\n    \n    // Go to API and get the answer\n    const resp = await fetch( url );\n    \n    // Convert answer to json format\n    const { data } = await resp.json();\n\n    // Go to every image\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            \n            // '?' if exist image,get. Else,nothing\n            url: img.images?.downsized_medium.url\n        }\n    } )\n    return gifs; // {}\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <div className='card animate__animated animate__flipInX'>\n            <img src = {url} alt = {title}/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n\nGifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n};\n","// PROCESA CADA ENTRADA POR TECLADO\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport { useFetchGift } from '../hooks/useFetchGift';\nimport { GifGridItem } from './GifGridItem';\n\n\n// porque desestructura 'category' como si fuese un objeto????\nexport const GifGrid = ({ category }) => {\n    \n    const { data:images, loading } = useFetchGift( category );\n    // images: { id, data, url}\n    // loading: bool\n\n    return (\n        <>\n            <h3>{category}</h3>\n            { loading && <p>Loading...</p>}\n            \n            <div className='card-grid'>\n                {\n                    images.map( imgs => (\n                        <GifGridItem\n                            key = { imgs.id }\n                            {...imgs} // Envia cada una de las propiedades de las imgs como una propiedad independiente\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n ","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n// PROCESA CADA ENTRADA POR TECLADO\nexport const useFetchGift = ( category ) => {\n    \n    const [ state, setState ] = useState({\n        data: [],\n        loading: true\n    });\n\n    // Los useEffect NO pueden ser async\n    useEffect( () => {\n        getGifs( category ) // {id, title, url}\n        .then( imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })      \n        }) \n    }, [ category ])\n    \n    return state; // {data{id, title, url}, loading}\n}\n","// HOME DE LA APP\nimport React, { useState } from 'react';\n\n// components\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = ( {defaultCategories = []} )  => {\n    \n    const [categories, setCategories ] = useState( defaultCategories );\n    \n    return (\n        <>\n            <h2>You can find GIF's that you want!</h2>\n            \n            {/* agrega una nueva categoria a 'categories'  */}\n            <AddCategory setCategories = { setCategories }/>\n            <hr />\n            <ol>\n                {\n                    categories.map( category => (\n                        \n                        // obtener imagenes\n                        <GifGrid\n                            key = { category }\n                            category = { category }  \n                        />\n                    ))\n                }\n            </ol>\n            <p>Developed by Juan C. Murcia.</p>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}